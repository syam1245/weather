{"ast":null,"code":"// src/index.ts\nimport Select from \"react-select\";\n\n// src/useAsyncPaginate.ts\nimport { useState as useState2, useCallback as useCallback2 } from \"react\";\n\n// src/useAsyncPaginateBase.ts\nimport { useState, useEffect, useRef, useCallback } from \"react\";\nimport useIsMountedRef from \"use-is-mounted-ref\";\nimport { useLazyRef } from \"@vtaits/use-lazy-ref\";\n\n// src/getInitialCache.ts\nvar getInitialCache = params => ({\n  isFirstLoad: true,\n  options: [],\n  hasMore: true,\n  isLoading: false,\n  additional: params.additional\n});\n\n// src/getInitialOptionsCache.ts\nvar getInitialOptionsCache = ({\n  options,\n  defaultOptions,\n  additional,\n  defaultAdditional\n}) => {\n  const initialOptions = defaultOptions === true ? null : defaultOptions instanceof Array ? defaultOptions : options;\n  if (initialOptions) {\n    return {\n      \"\": {\n        isFirstLoad: false,\n        isLoading: false,\n        options: initialOptions,\n        hasMore: true,\n        additional: defaultAdditional || additional\n      }\n    };\n  }\n  return {};\n};\n\n// src/defaultShouldLoadMore.ts\nvar AVAILABLE_DELTA = 10;\nvar defaultShouldLoadMore = (scrollHeight, clientHeight, scrollTop) => {\n  const bottomBorder = scrollHeight - clientHeight - AVAILABLE_DELTA;\n  return bottomBorder < scrollTop;\n};\n\n// src/defaultReduceOptions.ts\nvar defaultReduceOptions = (prevOptions, loadedOptions) => [...prevOptions, ...loadedOptions];\n\n// src/requestOptions.ts\nimport sleep from \"sleep-promise\";\n\n// src/validateResponse.ts\nvar errorText = '[react-select-async-paginate] response of \"loadOptions\" should be an object with \"options\" prop, which contains array of options.';\nvar checkIsResponse = response => {\n  if (!response) {\n    return false;\n  }\n  const {\n    options,\n    hasMore\n  } = response;\n  if (!Array.isArray(options)) {\n    return false;\n  }\n  if (typeof hasMore !== \"boolean\" && typeof hasMore !== \"undefined\") {\n    return false;\n  }\n  return true;\n};\nvar validateResponse = response => {\n  if (!checkIsResponse(response)) {\n    console.error(errorText, \"Received:\", response);\n    throw new Error(errorText);\n  }\n  return true;\n};\n\n// src/requestOptions.ts\nvar requestOptions = async (caller, paramsRef, optionsCacheRef, debounceTimeout, setOptionsCache, reduceOptions) => {\n  const currentInputValue = paramsRef.current.inputValue;\n  const isCacheEmpty = !optionsCacheRef.current[currentInputValue];\n  const currentOptions = isCacheEmpty ? getInitialCache(paramsRef.current) : optionsCacheRef.current[currentInputValue];\n  if (currentOptions.isLoading || !currentOptions.hasMore) {\n    return;\n  }\n  setOptionsCache(prevOptionsCache => ({\n    ...prevOptionsCache,\n    [currentInputValue]: {\n      ...currentOptions,\n      isLoading: true\n    }\n  }));\n  if (debounceTimeout > 0 && caller === \"input-change\") {\n    await sleep(debounceTimeout);\n    const newInputValue = paramsRef.current.inputValue;\n    if (currentInputValue !== newInputValue) {\n      setOptionsCache(prevOptionsCache => {\n        if (isCacheEmpty) {\n          const {\n            [currentInputValue]: itemForDelete,\n            ...restCache\n          } = prevOptionsCache;\n          return restCache;\n        }\n        return {\n          ...prevOptionsCache,\n          [currentInputValue]: {\n            ...currentOptions,\n            isLoading: false\n          }\n        };\n      });\n      return;\n    }\n  }\n  let response;\n  let hasError = false;\n  try {\n    const {\n      loadOptions\n    } = paramsRef.current;\n    response = await loadOptions(currentInputValue, currentOptions.options, currentOptions.additional);\n  } catch (e) {\n    hasError = true;\n  }\n  if (hasError) {\n    setOptionsCache(prevOptionsCache => ({\n      ...prevOptionsCache,\n      [currentInputValue]: {\n        ...currentOptions,\n        isLoading: false\n      }\n    }));\n    return;\n  }\n  if (validateResponse(response)) {\n    const {\n      options,\n      hasMore\n    } = response;\n    const newAdditional = response.hasOwnProperty(\"additional\") ? response.additional : currentOptions.additional;\n    setOptionsCache(prevOptionsCache => ({\n      ...prevOptionsCache,\n      [currentInputValue]: {\n        ...currentOptions,\n        options: reduceOptions(currentOptions.options, options, newAdditional),\n        hasMore: !!hasMore,\n        isLoading: false,\n        isFirstLoad: false,\n        additional: newAdditional\n      }\n    }));\n  }\n};\n\n// src/useAsyncPaginateBase.ts\nvar increaseStateId = prevStateId => prevStateId + 1;\nvar useAsyncPaginateBase = (params, deps = []) => {\n  const {\n    defaultOptions,\n    loadOptionsOnMenuOpen = true,\n    debounceTimeout = 0,\n    inputValue,\n    menuIsOpen,\n    filterOption = null,\n    reduceOptions = defaultReduceOptions,\n    shouldLoadMore = defaultShouldLoadMore\n  } = params;\n  const isMountedRef = useIsMountedRef();\n  const isInitRef = useRef(true);\n  const paramsRef = useRef(params);\n  paramsRef.current = params;\n  const setStateId = useState(0)[1];\n  const optionsCacheRef = useLazyRef(() => getInitialOptionsCache(params));\n  const callRequestOptions = useCallback(caller => {\n    requestOptions(caller, paramsRef, optionsCacheRef, debounceTimeout, reduceState => {\n      optionsCacheRef.current = reduceState(optionsCacheRef.current);\n      if (isMountedRef.current) {\n        setStateId(increaseStateId);\n      }\n    }, reduceOptions);\n  }, [debounceTimeout]);\n  const handleScrolledToBottom = useCallback(() => {\n    const currentInputValue = paramsRef.current.inputValue;\n    const currentOptions2 = optionsCacheRef.current[currentInputValue];\n    if (currentOptions2) {\n      callRequestOptions(\"menu-scroll\");\n    }\n  }, [callRequestOptions]);\n  useEffect(() => {\n    if (isInitRef.current) {\n      isInitRef.current = false;\n    } else {\n      optionsCacheRef.current = {};\n      setStateId(increaseStateId);\n    }\n    if (defaultOptions === true) {\n      callRequestOptions(\"autoload\");\n    }\n  }, deps);\n  useEffect(() => {\n    if (menuIsOpen && !optionsCacheRef.current[inputValue]) {\n      callRequestOptions(\"input-change\");\n    }\n  }, [inputValue]);\n  useEffect(() => {\n    if (menuIsOpen && !optionsCacheRef.current[\"\"] && loadOptionsOnMenuOpen) {\n      callRequestOptions(\"menu-toggle\");\n    }\n  }, [menuIsOpen]);\n  const currentOptions = optionsCacheRef.current[inputValue] || getInitialCache(params);\n  return {\n    handleScrolledToBottom,\n    shouldLoadMore,\n    filterOption,\n    isLoading: currentOptions.isLoading,\n    isFirstLoad: currentOptions.isFirstLoad,\n    options: currentOptions.options\n  };\n};\n\n// src/useAsyncPaginate.ts\nvar useAsyncPaginate = (params, deps = []) => {\n  const {\n    inputValue: inputValueParam,\n    menuIsOpen: menuIsOpenParam,\n    defaultInputValue: defaultInputValueParam,\n    defaultMenuIsOpen: defaultMenuIsOpenParam,\n    onInputChange: onInputChangeParam,\n    onMenuClose: onMenuCloseParam,\n    onMenuOpen: onMenuOpenParam\n  } = params;\n  const [inputValueState, setInputValue] = useState2(defaultInputValueParam || \"\");\n  const [menuIsOpenState, setMenuIsOpen] = useState2(!!defaultMenuIsOpenParam);\n  const inputValue = typeof inputValueParam === \"string\" ? inputValueParam : inputValueState;\n  const menuIsOpen = typeof menuIsOpenParam === \"boolean\" ? menuIsOpenParam : menuIsOpenState;\n  const onInputChange = useCallback2((nextInputValue, actionMeta) => {\n    if (onInputChangeParam) {\n      onInputChangeParam(nextInputValue, actionMeta);\n    }\n    setInputValue(nextInputValue);\n  }, [onInputChangeParam]);\n  const onMenuClose = useCallback2(() => {\n    if (onMenuCloseParam) {\n      onMenuCloseParam();\n    }\n    setMenuIsOpen(false);\n  }, [onMenuCloseParam]);\n  const onMenuOpen = useCallback2(() => {\n    if (onMenuOpenParam) {\n      onMenuOpenParam();\n    }\n    setMenuIsOpen(true);\n  }, [onMenuOpenParam]);\n  const baseResult = useAsyncPaginateBase({\n    ...params,\n    inputValue,\n    menuIsOpen\n  }, deps);\n  return {\n    ...baseResult,\n    inputValue,\n    menuIsOpen,\n    onInputChange,\n    onMenuClose,\n    onMenuOpen\n  };\n};\n\n// src/useComponents.ts\nimport { useMemo } from \"react\";\nimport { components as defaultComponents } from \"react-select\";\n\n// src/wrapMenuList.tsx\nimport { useEffect as useEffect2, useRef as useRef2, useCallback as useCallback3 } from \"react\";\nimport composeRefs from \"@seznam/compose-react-refs\";\nimport { jsx } from \"react/jsx-runtime\";\nvar CHECK_TIMEOUT = 300;\nfunction wrapMenuList(MenuList2) {\n  function WrappedMenuList(props) {\n    const {\n      selectProps,\n      innerRef\n    } = props;\n    const {\n      handleScrolledToBottom,\n      shouldLoadMore\n    } = selectProps;\n    const checkTimeoutRef = useRef2();\n    const menuListRef = useRef2(null);\n    const shouldHandle = useCallback3(() => {\n      const el = menuListRef.current;\n      if (!el) {\n        return false;\n      }\n      const {\n        scrollTop,\n        scrollHeight,\n        clientHeight\n      } = el;\n      return shouldLoadMore(scrollHeight, clientHeight, scrollTop);\n    }, [shouldLoadMore]);\n    const checkAndHandle = useCallback3(() => {\n      if (shouldHandle()) {\n        if (handleScrolledToBottom) {\n          handleScrolledToBottom();\n        }\n      }\n    }, [shouldHandle, handleScrolledToBottom]);\n    const setCheckAndHandleTimeout = useCallback3(() => {\n      checkAndHandle();\n      checkTimeoutRef.current = setTimeout(setCheckAndHandleTimeout, CHECK_TIMEOUT);\n    }, [checkAndHandle]);\n    useEffect2(() => {\n      setCheckAndHandleTimeout();\n      return () => {\n        if (checkTimeoutRef.current) {\n          clearTimeout(checkTimeoutRef.current);\n        }\n      };\n    }, []);\n    return /* @__PURE__ */jsx(MenuList2, {\n      ...props,\n      innerRef: composeRefs(innerRef, menuListRef)\n    });\n  }\n  return WrappedMenuList;\n}\n\n// src/useComponents.ts\nvar MenuList = wrapMenuList(defaultComponents.MenuList);\nvar useComponents = components => useMemo(() => ({\n  MenuList,\n  ...components\n}), [components]);\n\n// src/withAsyncPaginate.tsx\nimport { jsx as jsx2 } from \"react/jsx-runtime\";\nvar defaultCacheUniqs = [];\nvar defaultComponents2 = {};\nfunction withAsyncPaginate(SelectComponent) {\n  function WithAsyncPaginate(props) {\n    const {\n      components = defaultComponents2,\n      selectRef = void 0,\n      isLoading: isLoadingProp,\n      cacheUniqs = defaultCacheUniqs,\n      ...rest\n    } = props;\n    const asyncPaginateProps = useAsyncPaginate(rest, cacheUniqs);\n    const processedComponents = useComponents(components);\n    const isLoading = typeof isLoadingProp === \"boolean\" ? isLoadingProp : asyncPaginateProps.isLoading;\n    return /* @__PURE__ */jsx2(SelectComponent, {\n      ...props,\n      ...asyncPaginateProps,\n      isLoading,\n      components: processedComponents,\n      ref: selectRef\n    });\n  }\n  return WithAsyncPaginate;\n}\n\n// src/reduceGroupedOptions.ts\nvar checkGroup = group => {\n  if (!group) {\n    return false;\n  }\n  const {\n    label,\n    options\n  } = group;\n  if (typeof label !== \"string\" && typeof label !== \"undefined\") {\n    return false;\n  }\n  if (!Array.isArray(options)) {\n    return false;\n  }\n  return true;\n};\nvar reduceGroupedOptions = (prevOptions, loadedOptions) => {\n  const res = prevOptions.slice();\n  const mapLabelToIndex = {};\n  let prevOptionsIndex = 0;\n  const prevOptionsLength = prevOptions.length;\n  loadedOptions.forEach(optionOrGroup => {\n    const group = checkGroup(optionOrGroup) ? optionOrGroup : {\n      options: [optionOrGroup]\n    };\n    const {\n      label = \"\"\n    } = group;\n    let groupIndex = mapLabelToIndex[label];\n    if (typeof groupIndex !== \"number\") {\n      for (; prevOptionsIndex < prevOptionsLength && typeof mapLabelToIndex[label] !== \"number\"; ++prevOptionsIndex) {\n        const prevGroup = prevOptions[prevOptionsIndex];\n        if (checkGroup(prevGroup)) {\n          mapLabelToIndex[prevGroup.label || \"\"] = prevOptionsIndex;\n        }\n      }\n      groupIndex = mapLabelToIndex[label];\n    }\n    if (typeof groupIndex !== \"number\") {\n      mapLabelToIndex[label] = res.length;\n      res.push(group);\n      return;\n    }\n    res[groupIndex] = {\n      ...res[groupIndex],\n      options: [...res[groupIndex].options, ...group.options]\n    };\n  });\n  return res;\n};\n\n// src/index.ts\nvar AsyncPaginate = withAsyncPaginate(Select);\nexport { AsyncPaginate, checkIsResponse, reduceGroupedOptions, useAsyncPaginate, useAsyncPaginateBase, useComponents, validateResponse, withAsyncPaginate, wrapMenuList };","map":{"version":3,"names":["Select","useState","useState2","useCallback","useCallback2","useEffect","useRef","useIsMountedRef","useLazyRef","getInitialCache","params","isFirstLoad","options","hasMore","isLoading","additional","getInitialOptionsCache","defaultOptions","defaultAdditional","initialOptions","Array","AVAILABLE_DELTA","defaultShouldLoadMore","scrollHeight","clientHeight","scrollTop","bottomBorder","defaultReduceOptions","prevOptions","loadedOptions","sleep","errorText","checkIsResponse","response","isArray","validateResponse","console","error","Error","requestOptions","caller","paramsRef","optionsCacheRef","debounceTimeout","setOptionsCache","reduceOptions","currentInputValue","current","inputValue","isCacheEmpty","currentOptions","prevOptionsCache","newInputValue","itemForDelete","restCache","hasError","loadOptions","e","newAdditional","hasOwnProperty","increaseStateId","prevStateId","useAsyncPaginateBase","deps","loadOptionsOnMenuOpen","menuIsOpen","filterOption","shouldLoadMore","isMountedRef","isInitRef","setStateId","callRequestOptions","reduceState","handleScrolledToBottom","currentOptions2","useAsyncPaginate","inputValueParam","menuIsOpenParam","defaultInputValue","defaultInputValueParam","defaultMenuIsOpen","defaultMenuIsOpenParam","onInputChange","onInputChangeParam","onMenuClose","onMenuCloseParam","onMenuOpen","onMenuOpenParam","inputValueState","setInputValue","menuIsOpenState","setMenuIsOpen","nextInputValue","actionMeta","baseResult","useMemo","components","defaultComponents","useEffect2","useRef2","useCallback3","composeRefs","jsx","CHECK_TIMEOUT","wrapMenuList","MenuList2","WrappedMenuList","props","selectProps","innerRef","checkTimeoutRef","menuListRef","shouldHandle","el","checkAndHandle","setCheckAndHandleTimeout","setTimeout","clearTimeout","MenuList","useComponents","jsx2","defaultCacheUniqs","defaultComponents2","withAsyncPaginate","SelectComponent","WithAsyncPaginate","selectRef","isLoadingProp","cacheUniqs","rest","asyncPaginateProps","processedComponents","ref","checkGroup","group","label","reduceGroupedOptions","res","slice","mapLabelToIndex","prevOptionsIndex","prevOptionsLength","length","forEach","optionOrGroup","groupIndex","prevGroup","push","AsyncPaginate"],"sources":["/home/syampushpan/Downloads/WeatherForecast-main/Client/node_modules/react-select-async-paginate/src/index.ts","/home/syampushpan/Downloads/WeatherForecast-main/Client/node_modules/react-select-async-paginate/src/useAsyncPaginate.ts","/home/syampushpan/Downloads/WeatherForecast-main/Client/node_modules/react-select-async-paginate/src/useAsyncPaginateBase.ts","/home/syampushpan/Downloads/WeatherForecast-main/Client/node_modules/react-select-async-paginate/src/getInitialCache.ts","/home/syampushpan/Downloads/WeatherForecast-main/Client/node_modules/react-select-async-paginate/src/getInitialOptionsCache.ts","/home/syampushpan/Downloads/WeatherForecast-main/Client/node_modules/react-select-async-paginate/src/defaultShouldLoadMore.ts","/home/syampushpan/Downloads/WeatherForecast-main/Client/node_modules/react-select-async-paginate/src/defaultReduceOptions.ts","/home/syampushpan/Downloads/WeatherForecast-main/Client/node_modules/react-select-async-paginate/src/requestOptions.ts","/home/syampushpan/Downloads/WeatherForecast-main/Client/node_modules/react-select-async-paginate/src/validateResponse.ts","/home/syampushpan/Downloads/WeatherForecast-main/Client/node_modules/react-select-async-paginate/src/useComponents.ts","/home/syampushpan/Downloads/WeatherForecast-main/Client/node_modules/react-select-async-paginate/src/wrapMenuList.tsx","/home/syampushpan/Downloads/WeatherForecast-main/Client/node_modules/react-select-async-paginate/src/withAsyncPaginate.tsx","/home/syampushpan/Downloads/WeatherForecast-main/Client/node_modules/react-select-async-paginate/src/reduceGroupedOptions.ts"],"sourcesContent":["import Select from 'react-select';\n\nimport { withAsyncPaginate } from './withAsyncPaginate';\n\nexport { wrapMenuList } from './wrapMenuList';\nexport { reduceGroupedOptions } from './reduceGroupedOptions';\n\nexport { withAsyncPaginate };\n\nexport {\n  checkIsResponse,\n  validateResponse,\n} from './validateResponse';\nexport { useAsyncPaginateBase } from './useAsyncPaginateBase';\nexport { useAsyncPaginate } from './useAsyncPaginate';\nexport { useComponents } from './useComponents';\n\nexport const AsyncPaginate = withAsyncPaginate(Select);\n\nexport * from './types';\n","import {\n  useState,\n  useCallback,\n} from 'react';\nimport type {\n  GroupBase,\n  InputActionMeta,\n} from 'react-select';\n\nimport {\n  useAsyncPaginateBase,\n} from './useAsyncPaginateBase';\n\nimport type {\n  UseAsyncPaginateParams,\n  UseAsyncPaginateBaseResult,\n  UseAsyncPaginateResult,\n} from './types';\n\nexport const useAsyncPaginate = <OptionType, Group extends GroupBase<OptionType>, Additional>(\n  params: UseAsyncPaginateParams<OptionType, Group, Additional>,\n  deps: ReadonlyArray<unknown> = [],\n): UseAsyncPaginateResult<OptionType, Group> => {\n  const {\n    inputValue: inputValueParam,\n    menuIsOpen: menuIsOpenParam,\n    defaultInputValue: defaultInputValueParam,\n    defaultMenuIsOpen: defaultMenuIsOpenParam,\n    onInputChange: onInputChangeParam,\n    onMenuClose: onMenuCloseParam,\n    onMenuOpen: onMenuOpenParam,\n  } = params;\n\n  const [inputValueState, setInputValue] = useState(\n    defaultInputValueParam || '',\n  );\n  const [menuIsOpenState, setMenuIsOpen] = useState(\n    !!defaultMenuIsOpenParam,\n  );\n\n  const inputValue: string = typeof inputValueParam === 'string'\n    ? inputValueParam\n    : inputValueState;\n\n  const menuIsOpen: boolean = typeof menuIsOpenParam === 'boolean'\n    ? menuIsOpenParam\n    : menuIsOpenState;\n\n  const onInputChange = useCallback((\n    nextInputValue: string,\n    actionMeta: InputActionMeta,\n  ): void => {\n    if (onInputChangeParam) {\n      onInputChangeParam(nextInputValue, actionMeta);\n    }\n\n    setInputValue(nextInputValue);\n  }, [onInputChangeParam]);\n\n  const onMenuClose = useCallback((): void => {\n    if (onMenuCloseParam) {\n      onMenuCloseParam();\n    }\n\n    setMenuIsOpen(false);\n  }, [onMenuCloseParam]);\n\n  const onMenuOpen = useCallback((): void => {\n    if (onMenuOpenParam) {\n      onMenuOpenParam();\n    }\n\n    setMenuIsOpen(true);\n  }, [onMenuOpenParam]);\n\n  const baseResult: UseAsyncPaginateBaseResult<OptionType, Group> = useAsyncPaginateBase(\n    {\n      ...params,\n      inputValue,\n      menuIsOpen,\n    },\n    deps,\n  );\n\n  return {\n    ...baseResult,\n    inputValue,\n    menuIsOpen,\n    onInputChange,\n    onMenuClose,\n    onMenuOpen,\n  };\n};\n","import {\n  useState,\n  useEffect,\n  useRef,\n  useCallback,\n} from 'react';\n\nimport type {\n  GroupBase,\n} from 'react-select';\n\nimport useIsMountedRef from 'use-is-mounted-ref';\n\nimport { useLazyRef } from '@vtaits/use-lazy-ref';\n\nimport { getInitialCache } from './getInitialCache';\nimport { getInitialOptionsCache } from './getInitialOptionsCache';\nimport { defaultShouldLoadMore } from './defaultShouldLoadMore';\nimport { defaultReduceOptions } from './defaultReduceOptions';\nimport { requestOptions } from './requestOptions';\n\nimport type {\n  OptionsCacheItem,\n  UseAsyncPaginateBaseResult,\n  UseAsyncPaginateBaseParams,\n  RequestOptionsCallerType,\n} from './types';\n\nexport const increaseStateId = (prevStateId: number): number => prevStateId + 1;\n\nexport const useAsyncPaginateBase = <\nOptionType,\nGroup extends GroupBase<OptionType>,\nAdditional,\n  >(\n    params: UseAsyncPaginateBaseParams<OptionType, Group, Additional>,\n    deps: ReadonlyArray<any> = [],\n  ): UseAsyncPaginateBaseResult<OptionType, Group> => {\n  const {\n    defaultOptions,\n    loadOptionsOnMenuOpen = true,\n    debounceTimeout = 0,\n    inputValue,\n    menuIsOpen,\n    filterOption = null,\n    reduceOptions = defaultReduceOptions,\n    shouldLoadMore = defaultShouldLoadMore,\n  } = params;\n\n  const isMountedRef = useIsMountedRef();\n\n  const isInitRef = useRef<boolean>(true);\n  const paramsRef = useRef<UseAsyncPaginateBaseParams<OptionType, Group, Additional>>(params);\n\n  paramsRef.current = params;\n\n  const setStateId = useState(0)[1];\n\n  const optionsCacheRef = useLazyRef(() => getInitialOptionsCache(params));\n\n  const callRequestOptions = useCallback((caller: RequestOptionsCallerType): void => {\n    requestOptions(\n      caller,\n      paramsRef,\n      optionsCacheRef,\n      debounceTimeout,\n      (reduceState) => {\n        optionsCacheRef.current = reduceState(optionsCacheRef.current);\n\n        if (isMountedRef.current) {\n          setStateId(increaseStateId);\n        }\n      },\n      reduceOptions,\n    );\n  }, [debounceTimeout]);\n\n  const handleScrolledToBottom = useCallback((): void => {\n    const currentInputValue = paramsRef.current.inputValue;\n    const currentOptions = optionsCacheRef.current[currentInputValue];\n\n    if (currentOptions) {\n      callRequestOptions('menu-scroll');\n    }\n  }, [callRequestOptions]);\n\n  useEffect(() => {\n    if (isInitRef.current) {\n      isInitRef.current = false;\n    } else {\n      optionsCacheRef.current = {};\n      setStateId(increaseStateId);\n    }\n\n    if (defaultOptions === true) {\n      callRequestOptions('autoload');\n    }\n  }, deps);\n\n  useEffect(() => {\n    if (menuIsOpen && !optionsCacheRef.current[inputValue]) {\n      callRequestOptions('input-change');\n    }\n  }, [inputValue]);\n\n  useEffect(() => {\n    if (\n      menuIsOpen\n      && !optionsCacheRef.current['']\n      && loadOptionsOnMenuOpen\n    ) {\n      callRequestOptions('menu-toggle');\n    }\n  }, [menuIsOpen]);\n\n  const currentOptions: OptionsCacheItem<\n  OptionType,\n  Group,\n  Additional\n  > = optionsCacheRef.current[inputValue]\n    || getInitialCache(params);\n\n  return {\n    handleScrolledToBottom,\n    shouldLoadMore,\n    filterOption,\n    isLoading: currentOptions.isLoading,\n    isFirstLoad: currentOptions.isFirstLoad,\n    options: currentOptions.options,\n  };\n};\n","import type {\n  GroupBase,\n} from 'react-select';\n\nimport type {\n  OptionsCacheItem,\n  UseAsyncPaginateBaseParams,\n} from './types';\n\nexport const getInitialCache = <OptionType, Group extends GroupBase<OptionType>, Additional>(\n  params: UseAsyncPaginateBaseParams<OptionType, Group, Additional>,\n): OptionsCacheItem<OptionType, Group, Additional> => ({\n    isFirstLoad: true,\n    options: [],\n    hasMore: true,\n    isLoading: false,\n    additional: params.additional,\n  });\n","import type {\n  GroupBase,\n} from 'react-select';\n\nimport type {\n  OptionsCache,\n  UseAsyncPaginateBaseParams,\n} from './types';\n\nexport const getInitialOptionsCache = <\nOptionType,\nGroup extends GroupBase<OptionType>,\nAdditional>(\n    {\n      options,\n      defaultOptions,\n      additional,\n      defaultAdditional,\n    }: UseAsyncPaginateBaseParams<OptionType, Group, Additional>,\n  ): OptionsCache<OptionType, Group, Additional> => {\n  const initialOptions = defaultOptions === true\n    ? null\n    : (defaultOptions instanceof Array)\n      ? defaultOptions\n      : options;\n\n  if (initialOptions) {\n    return {\n      '': {\n        isFirstLoad: false,\n        isLoading: false,\n        options: initialOptions,\n        hasMore: true,\n        additional: defaultAdditional || additional,\n      },\n    };\n  }\n\n  return {};\n};\n","import type {\n  ShouldLoadMore,\n} from './types';\n\nconst AVAILABLE_DELTA = 10;\n\nexport const defaultShouldLoadMore: ShouldLoadMore = (scrollHeight, clientHeight, scrollTop) => {\n  const bottomBorder = scrollHeight - clientHeight - AVAILABLE_DELTA;\n\n  return bottomBorder < scrollTop;\n};\n","import type {\n  GroupBase,\n  OptionsOrGroups,\n} from 'react-select';\n\nexport const defaultReduceOptions = <OptionType, Group extends GroupBase<OptionType>>(\n  prevOptions: OptionsOrGroups<OptionType, Group>,\n  loadedOptions: OptionsOrGroups<OptionType, Group>,\n) => [...prevOptions, ...loadedOptions];\n","import type {\n  MutableRefObject,\n} from 'react';\n\nimport type {\n  GroupBase,\n} from 'react-select';\nimport sleep from 'sleep-promise';\n\nimport { getInitialCache } from './getInitialCache';\nimport { validateResponse } from './validateResponse';\n\nimport type {\n  OptionsCache,\n  OptionsCacheItem,\n  UseAsyncPaginateBaseParams,\n  ReduceOptions,\n  RequestOptionsCallerType,\n} from './types';\n\ntype MapOptionsCache<OptionType, Group extends GroupBase<OptionType>, Additional> = (\n  prevCache: OptionsCache<OptionType, Group, Additional>,\n) => OptionsCache<OptionType, Group, Additional>;\n\ntype SetOptionsCache<OptionType, Group extends GroupBase<OptionType>, Additional> = (\n  stateMapper: MapOptionsCache<OptionType, Group, Additional>,\n) => void;\n\nexport const requestOptions = async <OptionType, Group extends GroupBase<OptionType>, Additional>(\n  caller: RequestOptionsCallerType,\n  paramsRef: MutableRefObject<UseAsyncPaginateBaseParams<OptionType, Group, Additional>>,\n  optionsCacheRef: MutableRefObject<OptionsCache<OptionType, Group, Additional>>,\n  debounceTimeout: number,\n  setOptionsCache: SetOptionsCache<OptionType, Group, Additional>,\n  reduceOptions: ReduceOptions<OptionType, Group, Additional>,\n): Promise<void> => {\n  const currentInputValue = paramsRef.current.inputValue;\n\n  const isCacheEmpty = !optionsCacheRef.current[currentInputValue];\n\n  const currentOptions: OptionsCacheItem<OptionType, Group, Additional> = isCacheEmpty\n    ? getInitialCache(paramsRef.current)\n    : optionsCacheRef.current[currentInputValue];\n\n  if (currentOptions.isLoading || !currentOptions.hasMore) {\n    return;\n  }\n\n  setOptionsCache((\n    prevOptionsCache: OptionsCache<OptionType, Group, Additional>,\n  ): OptionsCache<OptionType, Group, Additional> => ({\n    ...prevOptionsCache,\n    [currentInputValue]: {\n      ...currentOptions,\n      isLoading: true,\n    },\n  }));\n\n  if (debounceTimeout > 0 && caller === 'input-change') {\n    await sleep(debounceTimeout);\n\n    const newInputValue = paramsRef.current.inputValue;\n\n    if (currentInputValue !== newInputValue) {\n      setOptionsCache((prevOptionsCache) => {\n        if (isCacheEmpty) {\n          const {\n            [currentInputValue]: itemForDelete,\n            ...restCache\n          } = prevOptionsCache;\n\n          return restCache;\n        }\n\n        return {\n          ...prevOptionsCache,\n          [currentInputValue]: {\n            ...currentOptions,\n            isLoading: false,\n          },\n        };\n      });\n\n      return;\n    }\n  }\n\n  let response;\n  let hasError = false;\n\n  try {\n    const {\n      loadOptions,\n    } = paramsRef.current;\n\n    response = await loadOptions(\n      currentInputValue,\n      currentOptions.options,\n      currentOptions.additional,\n    );\n  } catch (e) {\n    hasError = true;\n  }\n\n  if (hasError) {\n    setOptionsCache((prevOptionsCache) => ({\n      ...prevOptionsCache,\n      [currentInputValue]: {\n        ...currentOptions,\n        isLoading: false,\n      },\n    }));\n\n    return;\n  }\n\n  if (validateResponse(response)) {\n    const {\n      options,\n      hasMore,\n    } = response;\n\n    // eslint-disable-next-line no-prototype-builtins\n    const newAdditional = response.hasOwnProperty('additional')\n      ? response.additional\n      : currentOptions.additional;\n\n    setOptionsCache((prevOptionsCache) => ({\n      ...prevOptionsCache,\n      [currentInputValue]: {\n        ...currentOptions,\n        options: reduceOptions(currentOptions.options, options, newAdditional),\n        hasMore: !!hasMore,\n        isLoading: false,\n        isFirstLoad: false,\n        additional: newAdditional,\n      },\n    }));\n  }\n};\n","import type {\n  GroupBase,\n} from 'react-select';\n\nimport type {\n  Response,\n} from './types';\n\nexport const errorText = '[react-select-async-paginate] response of \"loadOptions\" should be an object with \"options\" prop, which contains array of options.';\n\nexport const checkIsResponse = <OptionType, Group extends GroupBase<OptionType>, Additional>(\n  response: unknown,\n): response is Response<OptionType, Group, Additional> => {\n  if (!response) {\n    return false;\n  }\n\n  const {\n    options,\n    hasMore,\n  } = response as {\n    options?: unknown;\n    hasMore?: unknown;\n  };\n\n  if (!Array.isArray(options)) {\n    return false;\n  }\n\n  if (typeof hasMore !== 'boolean' && typeof hasMore !== 'undefined') {\n    return false;\n  }\n\n  return true;\n};\n\nexport const validateResponse = <OptionType, Group extends GroupBase<OptionType>, Additional>(\n  response: unknown,\n): response is Response<OptionType, Group, Additional> => {\n  if (!checkIsResponse(response)) {\n    // eslint-disable-next-line no-console\n    console.error(errorText, 'Received:', response);\n    throw new Error(errorText);\n  }\n\n  return true;\n};\n","import {\n  useMemo,\n} from 'react';\nimport type {\n  GroupBase,\n  Props as SelectProps,\n} from 'react-select';\n\nimport { components as defaultComponents } from 'react-select';\n\nimport { wrapMenuList } from './wrapMenuList';\n\nexport const MenuList = wrapMenuList(defaultComponents.MenuList);\n\nexport type SelectComponentsConfig<\nOptionType,\nIsMulti extends boolean,\nGroup extends GroupBase<OptionType>,\n> = Partial<SelectProps<OptionType, IsMulti, Group>['components']>;\n\nexport const useComponents = <\nOptionType,\nGroup extends GroupBase<OptionType>,\nIsMulti extends boolean,\n>(\n    components: SelectComponentsConfig<OptionType, IsMulti, Group>,\n  ): SelectComponentsConfig<OptionType, IsMulti, Group> => useMemo(() => ({\n    MenuList,\n    ...components,\n  }), [components]);\n","import {\n  useEffect,\n  useRef,\n  useCallback,\n} from 'react';\nimport type {\n  ReactElement,\n} from 'react';\n\nimport type {\n  GroupBase,\n  MenuListProps,\n} from 'react-select';\n\nimport composeRefs from '@seznam/compose-react-refs';\n\nimport type {\n  ShouldLoadMore,\n} from './types';\n\nexport const CHECK_TIMEOUT = 300;\n\nexport type BaseSelectProps = {\n  handleScrolledToBottom?: () => void;\n  shouldLoadMore: ShouldLoadMore;\n};\n\ntype MenuListType <\nOption = unknown,\nIsMulti extends boolean = boolean,\nGroup extends GroupBase<Option> = GroupBase<Option>,\n> = (props: MenuListProps<Option, IsMulti, Group>) => ReactElement;\n\nexport function wrapMenuList<\nOption = unknown,\nIsMulti extends boolean = boolean,\nGroup extends GroupBase<Option> = GroupBase<Option>,\n>(\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  MenuList: MenuListType<Option, IsMulti, Group>,\n) {\n  function WrappedMenuList(props: MenuListProps<Option, IsMulti, Group>) {\n    const {\n      selectProps,\n      innerRef,\n    } = props;\n\n    const {\n      handleScrolledToBottom,\n      shouldLoadMore,\n    } = selectProps as unknown as BaseSelectProps;\n\n    const checkTimeoutRef = useRef<NodeJS.Timeout>();\n    const menuListRef = useRef<HTMLElement>(null);\n\n    const shouldHandle = useCallback(() => {\n      const el = menuListRef.current;\n\n      // menu is not rendered\n      if (!el) {\n        return false;\n      }\n\n      const {\n        scrollTop,\n        scrollHeight,\n        clientHeight,\n      } = el;\n\n      return shouldLoadMore(scrollHeight, clientHeight, scrollTop);\n    }, [shouldLoadMore]);\n\n    const checkAndHandle = useCallback(() => {\n      if (shouldHandle()) {\n        if (handleScrolledToBottom) {\n          handleScrolledToBottom();\n        }\n      }\n    }, [shouldHandle, handleScrolledToBottom]);\n\n    const setCheckAndHandleTimeout = useCallback(() => {\n      checkAndHandle();\n\n      checkTimeoutRef.current = setTimeout(setCheckAndHandleTimeout, CHECK_TIMEOUT);\n    }, [checkAndHandle]);\n\n    useEffect(() => {\n      setCheckAndHandleTimeout();\n\n      return (): void => {\n        if (checkTimeoutRef.current) {\n          clearTimeout(checkTimeoutRef.current);\n        }\n      };\n    }, []);\n\n    return (\n      <MenuList\n        {...props}\n        innerRef={composeRefs<HTMLElement>(innerRef, menuListRef)}\n      />\n    );\n  }\n\n  return WrappedMenuList;\n}\n","import type {\n  Ref,\n  ReactElement,\n} from 'react';\nimport type {\n  GroupBase,\n  Props as SelectProps,\n  SelectInstance,\n} from 'react-select';\n\nimport {\n  useAsyncPaginate,\n} from './useAsyncPaginate';\nimport {\n  useComponents,\n} from './useComponents';\n\nimport type {\n  UseAsyncPaginateResult,\n  AsyncPaginateProps,\n  WithAsyncPaginateType,\n} from './types';\n\nconst defaultCacheUniqs: unknown[] = [];\nconst defaultComponents = {};\n\ntype SelectComponentType = <\nOption = unknown,\nIsMulti extends boolean = boolean,\nGroup extends GroupBase<Option> = GroupBase<Option>,\n>(props: SelectProps<Option, IsMulti, Group> & {\n  ref?: Ref<SelectInstance<Option, IsMulti, Group>>;\n}) => ReactElement;\n\nexport function withAsyncPaginate(\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  SelectComponent: SelectComponentType,\n): WithAsyncPaginateType {\n  function WithAsyncPaginate<\n  OptionType,\n  Group extends GroupBase<OptionType>,\n  Additional,\n  IsMulti extends boolean = false,\n  >(props: AsyncPaginateProps<OptionType, Group, Additional, IsMulti>): ReactElement {\n    const {\n      components = defaultComponents,\n      selectRef = undefined,\n      isLoading: isLoadingProp,\n      cacheUniqs = defaultCacheUniqs,\n      ...rest\n    } = props;\n\n    const asyncPaginateProps: UseAsyncPaginateResult<OptionType, Group> = useAsyncPaginate(\n      rest,\n      cacheUniqs,\n    );\n\n    const processedComponents = useComponents<OptionType, Group, IsMulti>(components);\n\n    const isLoading = typeof isLoadingProp === 'boolean'\n      ? isLoadingProp\n      : asyncPaginateProps.isLoading;\n\n    return (\n      <SelectComponent\n        {...props}\n        {...asyncPaginateProps}\n        isLoading={isLoading}\n        components={processedComponents}\n        ref={selectRef}\n      />\n    );\n  }\n\n  return WithAsyncPaginate;\n}\n","import type {\n  GroupBase,\n  OptionsOrGroups,\n} from 'react-select';\n\nexport const checkGroup = (group: unknown): group is GroupBase<unknown> => {\n  if (!group) {\n    return false;\n  }\n\n  const {\n    label,\n    options,\n  } = group as {\n    label?: unknown;\n    options?: unknown;\n  };\n\n  if (typeof label !== 'string' && typeof label !== 'undefined') {\n    return false;\n  }\n\n  if (!Array.isArray(options)) {\n    return false;\n  }\n\n  return true;\n};\n\nexport const reduceGroupedOptions = <\nOptionType,\nGroup extends GroupBase<OptionType>,\n>(\n    prevOptions: OptionsOrGroups<OptionType, Group>,\n    loadedOptions: OptionsOrGroups<OptionType, Group>,\n  ): OptionsOrGroups<OptionType, Group> => {\n  const res = prevOptions.slice();\n\n  const mapLabelToIndex: Record<string, number> = {};\n  let prevOptionsIndex = 0;\n  const prevOptionsLength = prevOptions.length;\n\n  loadedOptions.forEach((optionOrGroup) => {\n    const group = checkGroup(optionOrGroup)\n      ? optionOrGroup\n      : {\n        options: [optionOrGroup],\n      } as unknown as Group;\n\n    const {\n      label = '',\n    } = group;\n\n    let groupIndex = mapLabelToIndex[label];\n    if (typeof groupIndex !== 'number') {\n      for (;\n        prevOptionsIndex < prevOptionsLength && typeof mapLabelToIndex[label] !== 'number';\n        ++prevOptionsIndex\n      ) {\n        const prevGroup = prevOptions[prevOptionsIndex];\n\n        if (checkGroup(prevGroup)) {\n          mapLabelToIndex[prevGroup.label || ''] = prevOptionsIndex;\n        }\n      }\n\n      groupIndex = mapLabelToIndex[label];\n    }\n\n    if (typeof groupIndex !== 'number') {\n      mapLabelToIndex[label] = res.length;\n      res.push(group);\n      return;\n    }\n\n    res[groupIndex] = {\n      ...res[groupIndex],\n      options: [...(res[groupIndex] as Group).options, ...group.options],\n    };\n  });\n\n  return res;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}